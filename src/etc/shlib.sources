# -*- mode: shell-script -*-
## Begin shlib

_shlib_caller="$0"
[ "$_shlib_loaded" ] && return 0

export SHLIB_PATH=${SHLIB_PATH:-"/usr/lib/shlib"}

export SHLIB_PREFIX=${SHLIB_PREFIX:-"lib"}
export SHLIB_SUFFIX=${SHLIB_SUFFIX:-".sh"}
export SHLIB_AUTOLOAD_PATH=$SHLIB_PATH/autoload


export _shlib_NL=$'\n'
export _shlib_included=${_shlib_included:-$_shlib_NL}
export _pkg_content=${_pkg_content:-$_shlib_NL}
_fn_imported=${_fn_imported:-$_shlib_NL}
_shell_id="$BASHPID"
export _protected_fn=${_protected_fn:-$_shlib_NL}


_get_caller() {
    local deep="${1:0}" fn sourced
    read _ fn sourced < <(caller $((deep + 1)))
    [ "$fn" == "source" -o "$fn" == "main" ] && fn=${sourced##*/}
    [ "$fn" ] || fn="${FUNCNAME[$((deep + 2))]}"
    [ "$fn" ] || fn=${_shlib_caller##*/}
    echo "$fn"
}
export -f _get_caller


fn.hash() { declare -f "$1" | tail -n +2 | sha1sum | cut -f 1 -d " "; }
fn.exists() { declare -F "$1" >/dev/null; }
fn.cp() { eval "$(echo "$2() " ; declare -f "$1" | tail -n +2)"; }
fn.rm() { unset -f "$1"; }
export -f fn.exists fn.cp fn.rm fn.hash


## XXXvlab: could cache this result in memory
_get_fn_names() {
    egrep "^\s*(function\s+)?[a-zA-Z_0-9-]+\s*\(\s*\)\s*(\{.*)?$" |
                        cut -f 1 -d "(" | tr ' ' '\n' | sort -u  | grep -v "^function\$"
}
export -f _get_fn_names

## Use with subshell
_convert_fn_names() {
    local content fun_names pkg_fns hash fn_dst_name
    content=$(cat -)
    fun_names=$(echo "$content" | _get_fn_names)
    . <(echo "$content") > /dev/null || return 1
    pkg_fns=" "
    for fun in $fun_names; do
        ## get md5
        hash=$(fn.hash "$fun")
        fn_dst_name="SHLIB_$hash"
        pkg_fns+="$fun|$fn_dst_name "
        echo "$fn_dst_name() "
        declare -f "$fun" | tail -n +2
        echo "export -f \"$fn_dst_name\""
    done
    echo "_pkg_fns='$pkg_fns'"
}
export -f _convert_fn_names

_lookup_fun() {
    local needle="$1" fnname hashname
    shift
    while IFS="|" read fnname hashname; do
        if [ "$fnname" == "$needle" ]; then
            echo "$hashname"
            return 0
        fi
    done < <(echo "$@" | tr ' ' '\n')
    return 1
}
export -f _lookup_fun

_is_set_in_base_env() {
    local procid="$1" varname="$2"
    ## use procstat -e for BSD
    cat "/proc/$procid/environ" |
        sed -r -e '1h;2,$H;$!d;g' \
            -e 's/^([^\x0]*\x0|\x0)*'"$varname"'=([^\x0]*)(\x0)?([^\x0]|\x0)*$/\2/g'
}

_check_no_override() {
    local fun="$1" hashed_fn_name="$2" filtered_fns
    # echo "$BASHPID check $fun:" $_fn_imported >&2
    if [[ $_shell_id != "$BASHPID" ]]; then ## subshell detected
        _shell_id="$BASHPID"
        _fn_imported=""
    fi
    if [[ $_fn_imported == *"$_shlib_NL$fun$_shlib_NL"* ]]; then
        if fn.exists "$fun"; then
            if [ "SHLIB_$(fn.hash "$fun")" != "$hashed_fn_name" ]; then
                echo "${FUNCNAME[2]}: error: you can't override '$fun' that was previouly imported." >&2
                echo "  Note: you can use subshells to allow this behavior." >&2
                return 1
            fi
        fi
    fi
    if [[ $_protected_fn == *"$_shlib_NL$fun: "* ]]; then
        if fn.exists "$fun"; then
            filtered_fns=()
            for dependee in $(echo "$_protected_fn" | egrep "^$fun: " | cut -f 2- -d ":"); do
                fn.exists "$dependee" && filtered_fns+=("$dependee")
            done
            if [ "${#filtered_fns[*]}" == 0 ]; then
                _protected_fn="$(echo "$_protected_fn" | grep -v "^$fun: ")"
            elif [ "SHLIB_$(fn.hash "$fun")" != "$hashed_fn_name" ]; then
                echo "${FUNCNAME[2]}: error: you can't override '$fun' as it is used by: ${filtered_fns[*]}." >&2
                return 1
            fi
        fi
    fi
}
export -f _check_no_override

_shlib_load() {
    local filename="$1" pkgname="$2" fun hash fn_dst_name fn_list contents fun_names
    shift; shift
    [[ $_shlib_included == *"$_shlib_NL$filename$_shlib_NL"* ]] && return 0
    if ! [ -f "$filename" -a -r "$filename" ]; then
        echo "$(_get_caller 0): error: file '$filename' cannot be open for read." >&2
        return 1
    fi
    contents=$(cat "$filename")
    if [ "$pkgname" ]; then
        . <(echo "$contents" | _convert_fn_names) || {
            echo "$(_get_caller 0): error: sourcing baked content of '$1' failed." >&2
            return 1
        }
        fun_names=$(echo "$_pkg_fns" | sed -r 's/\|.*$//g')
        _pkg_content+="$pkgname; $_pkg_fns$_shlib_NL"  ## storing all functions of package
        for fun in "$@"; do
            hashed_fn_name=$(_lookup_fun "$fun" $_pkg_fns) || {
                echo "$(_get_caller): error: no function '$fun' found in baked '$filename'." >&2
                echo "  Note: package '$pkgname' contains these functions: $_pkg_fns" >&2
                return 1
            }
            _check_no_override "$fun" "$hashed_fn_name" || return 1
            fn.cp "$hashed_fn_name" "$fun"
            to_export_filtered+=$fun$_shlib_NL
            _fn_imported+=$fun$_shlib_NL
        done
    else
        fun_names=$(echo "$contents" | _get_fn_names)
        . <(echo "$contents") || {
            echo "$(_get_caller): error: sourcing content of '$filename' failed." >&2
            return 1
        }
        to_export_filtered=$_shlib_NL
        for fun in $fun_names; do
            to_export_filtered+=$fun$_shlib_NL
        done
    fi
    if [ "$to_export_filtered" != "$_shlib_NL" ]; then
        export -f $to_export_filtered
    fi
    _shlib_included+=$filename$_shlib_NL
}
export -f _shlib_load


include() {
    local label
    for label in "$@"; do
        _shlib_load "$SHLIB_PATH/$SHLIB_PREFIX$label$SHLIB_SUFFIX" || exit 1
        if fn.exists "$label:init"; then
            "$label:init"
        fi
    done
}
export -f include


autoload() {
    [ -d "$SHLIB_AUTOLOAD_PATH" ] || return 0  ## ignore if no autoload directory
    for script in "$SHLIB_AUTOLOAD_PATH"/*.sh; do
        [ -f "$script" ] || continue
        _shlib_load "$script" || exit 1
    done
}


autoload || {
    echo "Fatal: shlib: autoload failed." >&2
    exit 1
}

export _shlib_loaded=1


##
## new versioned import
##

export from_IDENTIFIER_REGEX="[a-zA-Z0-9_]+"
export from_VERSION_REGEX="[a-zA-Z0-9_.]+"
export from_FILE_SPEC_REGEX="(${from_IDENTIFIER_REGEX}-${from_VERSION_REGEX})?::${from_IDENTIFIER_REGEX}"
export from_CODEBLOCK_REGEX="${from_IDENTIFIER_REGEX}"

from() {
    [ "$2" == "import" ] || {
        echo "shlib: invalid 'from' syntax (missing 'import' in second position)." >&2
        return 1
    }
    local file_spec="$1"
    shift 2
    [[ "$file_spec" =~ ^${from_FILE_SPEC_REGEX}$ ]] || {
        echo "shlib: invalid 'from' syntax: file spec '$file_spec' does not match ${from_FILE_SPEC_REGEX}." >&2
        exit 1
    }
    local pkg=${file_spec%%::*} lib_name=${file_spec##*::}
    local pkg_name=${pkg%%-*} pkg_version=${pkg##*-}

    for codeblock_name in "$@"; do
        [[ "$codeblock_name" =~ ^$from_CODEBLOCK_REGEX$ ]] || {
            echo "shlib: from: codeblock name '$codeblock_name' does not match ${from_CODEBLOCK_REGEX}." >&2
            exit 1
        }
    done

    if [[ $_pkg_content == *"$_shlib_NL$pkg; "* ]]; then
        ## already loaded:
        while read line; do  ## not sure that we get the correct package
            cur_pkg=${line%;*}
            [ "$cur_pkg" == "$pkg" ] || continue
            cur_content=${line#*;}
            for fun in "$@"; do
                candidate=$(_lookup_fun "$fun" $cur_content) || {
                    echo "$(_get_caller): error: no function '$fun' in loaded package '$pkg'." >&2
                    return 1
                }
                _check_no_override "$fun" "$candidate" || exit 1
                ## XXXvlab: should cache fn.hash calculation
                if ! fn.exists "$fun" || [ "$fun::$(fn.hash "$fun")" != "$candidate" ]; then
                    fn.cp "$candidate" "$fun"
                    export -f "$fun"
                    _fn_imported+=$fun$_shlib_NL
                fi
            done
        done < <(echo "$_pkg_content" | grep "^$pkg; ")
    else
        _shlib_load "$SHLIB_PATH/$pkg_name/$pkg_version/$SHLIB_PREFIX$lib_name$SHLIB_SUFFIX" "$pkg" "$@" || {
            echo "$(_get_caller): error: 'from $pkg import $@' failed." >&2
            exit 1
        }
    fi

}
export -f from

## End shlib
